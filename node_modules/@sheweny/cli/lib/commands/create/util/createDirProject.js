"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createDirProject = exports.renameDir = void 0;
const promises_1 = require("fs/promises");
const path_1 = require("path");
const chalk = require("chalk");
const fs_1 = require("fs");
async function renameDir(options) {
    if (options.dirName)
        options.dirName = options.dirName.replaceAll(/<|>|:|"|\/|\\|\||\?|\*|(^(aux|con|clock|nul|prn|com[1-9]|lpt[1-9])$)/gi, "");
    const pathProject = (0, path_1.join)(process.cwd(), options.dirName);
    if ((0, fs_1.existsSync)(pathProject) || !options.dirName) {
        const reg = new RegExp(/\_[0-9]{1,2}/);
        const match = options.dirName.match(reg);
        if (match && match.index === options.dirName.length - match[0].length) {
            const number = parseInt(options.dirName.substring(match.index + 1, options.dirName.length)) +
                1;
            options = {
                ...options,
                dirName: options.dirName.replace(reg, `_${number}`),
            };
            return renameDir(options);
        }
        else {
            options.dirName += "_1";
            return renameDir(options);
        }
    }
    else
        return options;
}
exports.renameDir = renameDir;
async function createDirProject(options) {
    try {
        options = await renameDir(options);
        const pathDir = (0, path_1.join)(process.cwd(), options.dirName);
        await (0, promises_1.mkdir)(pathDir);
        options = {
            ...options,
            targetDirectory: pathDir,
        };
        return options;
    }
    catch (err) {
        console.log(`${chalk.red.bold("ERROR")} An error occurred while creating the folder`);
        return process.exit(1);
    }
}
exports.createDirProject = createDirProject;
