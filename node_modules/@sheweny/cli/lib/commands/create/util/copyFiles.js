"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.copyFiles = void 0;
const promises_1 = require("fs/promises");
const path_1 = require("path");
const chalk = require("chalk");
function checkFile(options, file) {
    const dirHandlers = ["events", "commands", "buttons", "selectmenus", "inhibitors"];
    if (file === "interactions" &&
        !options.handlers?.includes("buttons") &&
        !options.handlers?.includes("selectmenus"))
        return true;
    else if (dirHandlers.includes(file) && !options.handlers?.includes(file))
        return true;
    return false;
}
async function copyFiles(options, template = options.templateDirectory, target = options.targetDirectory) {
    try {
        const templateFiles = await (0, promises_1.readdir)(template);
        for (const file of templateFiles) {
            const fileStat = await (0, promises_1.stat)((0, path_1.join)(template, file));
            if (fileStat.isDirectory()) {
                if (checkFile(options, file))
                    continue;
                await (0, promises_1.mkdir)((0, path_1.join)(target, file));
                await copyFiles(options, (0, path_1.join)(template, file), (0, path_1.join)(target, file));
            }
            else {
                if (checkFile(options, file))
                    continue;
                const fileRead = await Promise.resolve().then(() => require((0, path_1.join)(template, file)));
                await (0, promises_1.writeFile)((0, path_1.join)(target, fileRead(options)[1]), fileRead(options)[0]);
            }
        }
    }
    catch (err) {
        console.error(err);
        console.log(`${chalk.red.bold("ERROR")} An error occurred while copying the files`);
        return process.exit(1);
    }
}
exports.copyFiles = copyFiles;
