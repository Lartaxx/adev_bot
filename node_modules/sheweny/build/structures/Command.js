"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Command = void 0;
const collection_data_1 = require("collection-data");
const _1 = require(".");
/**
 * Represents an Command structure
 * @extends {BaseStructure}
 */
class Command extends _1.BaseStructure {
    /**
     * Constructor for build a Command
     * @param {ShewenyClient} client Client framework
     * @param {CommandData} data Data for build a Command
     */
    constructor(client, data) {
        super(client);
        this.name = data.name;
        this.description = data.description || "";
        this.type = data.type || "MESSAGE_COMMAND";
        this.defaultPermission = this.isType("SLASH_COMMAND", "CONTEXT_MENU_USER", "CONTEXT_MENU_MESSAGE")
            ? data
                .defaultPermission
            : undefined;
        this.options = this.isType("SLASH_COMMAND")
            ? data.options
            : undefined;
        this.args = this.isType("MESSAGE_COMMAND") ? data.args : undefined;
        this.category = data.category || "";
        this.channel = data.channel;
        this.cooldown = data.cooldown || 0;
        this.adminsOnly = data.adminsOnly || false;
        this.userPermissions = data.userPermissions || [];
        this.clientPermissions = data.clientPermissions || [];
        this.aliases = this.isType("MESSAGE_COMMAND") ? data.aliases : [];
        this.cooldowns = new collection_data_1.Collection();
    }
    /**
     * Unregister a command from collections
     * @returns {boolean}
     */
    unregister() {
        this.client.collections.commands?.delete(this.name);
        delete require.cache[require.resolve(this.path)];
        return true;
    }
    /**
     * Reload a command
     * @returns {Promise<Collection<string, Command> | null>} The Application Commands collection
     */
    async reload() {
        if (this.path) {
            this.unregister();
            return this.register();
        }
        return null;
    }
    /**
     * Register a command in collections
     * @returns {Collection<string, ApplicationCommand>} The Application Commands collection
     */
    async register() {
        const Command = (await Promise.resolve().then(() => require(this.path))).default;
        const AC = new Command(this.client);
        return this.client.collections.commands
            ? this.client.collections.commands.set(AC.name, AC)
            : new collection_data_1.Collection().set(AC.name, AC);
    }
    isType(...types) {
        if (types.includes(this.type))
            return true;
        return false;
    }
}
exports.Command = Command;
