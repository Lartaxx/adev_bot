"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ShewenyClient = void 0;
const discord_js_1 = require("discord.js");
const managers_1 = require("../managers");
const path_1 = require("path");
const promises_1 = require("fs/promises");
const resolve_1 = require("@sheweny/resolve");
const errors_1 = require("../errors");
/**
 * Sheweny framework client
 */
class ShewenyClient extends discord_js_1.Client {
    /**
     * Set options and your client is ready
     * @param {ShewenyClientOptions} options Client framework options
     * @param {ClientOptions} [clientOptions] Client discord.js options
     */
    constructor(options, clientOptions) {
        super(clientOptions || options);
        /**
         * The manager of handlers
         * @type {HandlersManager}
         */
        this.handlers = {};
        /**
         * The collections of handlers
         * @type {HandlersManager}
         */
        this.collections = {};
        /**
         * A util tool to resolve channel, user, etc
         * @type {DiscordResolve}
         */
        this.util = new resolve_1.DiscordResolve(this);
        this.mode = options.mode || "development";
        if (options.mode !== "production")
            new errors_1.ShewenyWarning(this, "You are running Sheweny in development mode. Make sure to turn on production mode when deploying for production to avoid warnings.");
        this.admins = options.admins || [];
        this.joinThreadsOnCreate = options.joinThreadsOnCreate || false;
        this.handlers.commands = options.handlers?.commands
            ? new managers_1.CommandsManager(this, options.handlers.commands.directory, {
                loadAll: true,
                guildId: options.handlers.commands.guildId,
                prefix: options.handlers.commands.prefix,
                applicationPermissions: options.handlers.commands.applicationPermissions,
            })
            : undefined;
        this.handlers.events = options.handlers?.events
            ? new managers_1.EventsManager(this, options.handlers.events.directory, true)
            : undefined;
        this.handlers.buttons = options.handlers?.buttons
            ? new managers_1.ButtonsManager(this, options.handlers.buttons.directory, true)
            : undefined;
        this.handlers.selectMenus = options.handlers?.selectMenus
            ? new managers_1.SelectMenusManager(this, options.handlers.selectMenus.directory, true)
            : undefined;
        this.handlers.inhibitors = options.handlers?.inhibitors
            ? new managers_1.InhibitorsManager(this, options.handlers.inhibitors.directory, true)
            : undefined;
        (async () => {
            const dir = (0, path_1.join)(__dirname, "../events");
            const files = await (0, promises_1.readdir)(dir);
            for (const file of files) {
                const event = await Promise.resolve().then(() => require(`${dir}/${file}`)).then((e) => e.default);
                const evtName = file.split(".")[0];
                this.on(evtName, (...args) => event(this, ...args));
            }
        })();
    }
    /**
     * Return true when the client is ready
     * @returns {Promise<boolean>}
     */
    awaitReady() {
        return new Promise((resolve) => {
            this.on("ready", () => {
                resolve(true);
            });
        });
    }
}
exports.ShewenyClient = ShewenyClient;
