"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EventsManager = void 0;
const loadFiles_1 = require("../utils/loadFiles");
/**
 * Manager for Events
 */
class EventsManager {
    /**
     * Constructor to manage events
     * @param {ShewenyClient} client Client framework
     * @param {string} directory Directory of the events folder
     * @param {boolean} [loadAll] If the events are loaded during bot launch
     */
    constructor(client, directory, loadAll) {
        if (!client)
            throw new TypeError("Client must be provided.");
        if (!directory)
            throw new TypeError("Directory must be provided.");
        this.client = client;
        this.directory = directory;
        if (loadAll)
            this.loadAndRegisterAll();
        client.handlers.events = this;
    }
    /**
     * Load all events in collection
     * @returns {Promise<Collection<keyof ClientEvents, Event>>}
     */
    async loadAll() {
        const events = await (0, loadFiles_1.loadFiles)(this.client, this.directory, "name");
        this.client.collections.events = events;
        this.events = events;
        return events;
    }
    /**
     * Emit all events in collection
     * @param {Collection<keyof ClientEvents, Event> | undefined} [events] Events collection that will be emit
     * @returns {Promise<void>}
     */
    async registerAll(events = this.events) {
        if (!events)
            throw new Error("No events found");
        for (const [name, evt] of events) {
            if (evt.once)
                this.client.once(name, (...args) => evt.execute(...args));
            else
                this.client.on(name, (...args) => evt.execute(...args));
        }
    }
    /**
     * Load all and Register events
     * @returns {Promise<void>}
     */
    async loadAndRegisterAll() {
        const events = await this.loadAll();
        await this.registerAll(events);
    }
}
exports.EventsManager = EventsManager;
